namespace Testing
{
    public class CreatePerson
    {
        /// <summary>
        /// Testing comment.
        /// </summary>
        [HttpPost(Controller = "People")]
        public record Command(string FirstName, string LastName): IRequest<int>
        {
            [Microsoft.AspNetCore.Authorization.AllowAnonymous]
            [Microsoft.AspNetCore.Mvc.ValidateAntiForgeryToken]
            [Microsoft.AspNetCore.Mvc.ProducesResponseType(Microsoft.AspNetCore.Http.StatusCodes.Status201Created, Type = typeof(int))]
            private void RequestMethodDefinition()
            {
                throw new NotImplementedException();
            }
        }

        public class Handler : IRequestHandler<Command, int>
        {
            public Task<int> Handle(Command request, CancellationToken cancellationToken)
                => Task.FromResult(new Random().Next());
        }
    }
    
    [HttpDelete("{id:int}", Controller = "People")]
    public class DeletePerson : DeleteCommandBase<Person>
    {
    }
    
    public class UpdatePerson
    {
        /// <summary>
        /// Command for update person.
        /// </summary>
        [HttpPut("{id:int}", Controller = "People")]
        [AdditionalParameters("id")]
        public record Command() : IRequest<Unit>
        {
            [JsonIgnore]
            public int Id { get; set; }
            public string FirstName { get; set; }
            public string LastName { get; set; }
        }

        public class Handler : IRequestHandler<Command, Unit>
        {
            public Task<Unit> Handle(Command request, CancellationToken cancellationToken)
                => Unit.Task;
        }
    }
    
    public class GetAllPeople
    {
        [HttpGet("all", Controller = "People", From = From.Ignore)]
        public record Query() : IRequest<IEnumerable<Response>>;

        [HttpGet(Controller = "People", Name = "GetPeople", From = From.Query)]
        public record QueryPager(int Skip, int Take) : IRequest<IEnumerable<Response>>;

        public record Handler :
            IRequestHandler<Query, IEnumerable<Response>>,
            IRequestHandler<QueryPager, IEnumerable<Response>>
        {
            public Task<IEnumerable<Response>> Handle(Query request, CancellationToken cancellationToken)
                => AutoFaker.Generate<Response>(10).AsTask();

            public Task<IEnumerable<Response>> Handle(QueryPager request, CancellationToken cancellationToken)
                => AutoFaker.Generate<Response>(100).Skip(request.Skip).Take(request.Take).AsTask();
        }

        public record Response(int Id, string LastName);
    }
    
    public class GetPersonById
    {
        [HttpGet("{id}", Controller = "People", Name = "GetById")]
        public record Query(int Id) : IRequest<Response>;

        public class Handler : IRequestHandler<Query, Response>
        {
            public Task<Response> Handle(Query request, CancellationToken cancellationToken)
                => AutoFaker.Generate<Response>().AsTaskSingleValue();
        }

        public record Response(int Id, string FirstName, string LastName);
    }
}